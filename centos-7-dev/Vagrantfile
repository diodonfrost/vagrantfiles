# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "centos/7"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"
  config.vm.network "forwarded_port", guest: 443, host: 4443, host_ip: "127.0.0.1"
  config.vm.network "forwarded_port", guest: 9000, host: 9000, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    vb.cpus = "4"
    vb.memory = "4096"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    yum install -y epel-release
    yum install -y net-tools unzip curl wget git
    yum install -y htop vim nmap whois openssl-devel gcc python3 python3-pip python3-cffi python3-devel
    python3 -m pip install --upgrade setuptools setuptools-rust wheel pip && python3 -m pip install ansible
	  curl -fsSL https://get.docker.com -o get-docker.sh
	  sh get-docker.sh
	  systemctl enable docker
	  systemctl start docker
    /usr/local/bin/ansible-galaxy install diodonfrost.vagrant && ln -s ~/.ansible/roles/diodonfrost.vagrant ~/.ansible/roles/ansible-role-vagrant
    /usr/local/bin/ansible-galaxy install diodonfrost.packer && ln -s ~/.ansible/roles/diodonfrost.packer ~/.ansible/roles/ansible-role-packer
    /usr/local/bin/ansible-galaxy install diodonfrost.terraform && ln -s ~/.ansible/roles/diodonfrost.terraform ~/.ansible/roles/ansible-role-terraform
    /usr/local/bin/ansible-galaxy install diodonfrost.terragrunt && ln -s ~/.ansible/roles/diodonfrost.terragrunt ~/.ansible/roles/ansible-role-terragrunt
    /usr/local/bin/ansible-galaxy install diodonfrost.sonar_scanner && ln -s ~/.ansible/roles/diodonfrost.sonar_scanner ~/.ansible/roles/ansible-role-sonar-scanner
    /usr/local/bin/ansible-galaxy install diodonfrost.git_lfs && ln -s ~/.ansible/roles/diodonfrost.git_lfs ~/.ansible/roles/ansible-role-git-lfs
    /usr/local/bin/ansible-galaxy install diodonfrost.ohmyzsh && ln -s ~/.ansible/roles/diodonfrost.ohmyzsh ~/.ansible/roles/ansible-role-ohmyzsh
    /usr/local/bin/ansible-pull -U https://github.com/diodonfrost/ansible-role-vagrant tests/test.yml
    /usr/local/bin/ansible-pull -U https://github.com/diodonfrost/ansible-role-packer tests/test.yml
    /usr/local/bin/ansible-pull -U https://github.com/diodonfrost/ansible-role-terraform tests/test.yml
    /usr/local/bin/ansible-pull -U https://github.com/diodonfrost/ansible-role-terragrunt tests/test.yml
    /usr/local/bin/ansible-pull -U https://github.com/diodonfrost/ansible-role-sonar-scanner tests/test.yml
    /usr/local/bin/ansible-pull -U https://github.com/diodonfrost/ansible-role-git-lfs tests/test.yml
    /usr/local/bin/ansible-pull -U https://github.com/diodonfrost/ansible-role-ohmyzsh tests/test.yml
  SHELL
end
